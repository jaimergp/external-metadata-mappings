{
  "$id": "https://github.com/python/peps/blob/main/peps/pep-0XXX/central-registry.schema.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$defs": {
    "MappingWithSpecs": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "PURL-like identifier, as provided in the central registry,\nbeing mapped to ecosystem specific packages.",
          "minLength": 5,
          "pattern": "^dep:.+$",
          "title": "Id",
          "type": "string"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Free-form field for details about the mapping. Allows Markdown.",
          "title": "Description"
        },
        "extra_metadata": {
          "anyOf": [
            {
              "additionalProperties": true,
              "propertyNames": {
                "minLength": 1
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Free-form key-value store for arbitrary metadata.",
          "title": "Extra Metadata"
        },
        "specs": {
          "anyOf": [
            {
              "minLength": 1,
              "type": "string"
            },
            {
              "items": {
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            {
              "$ref": "#/$defs/SpecsDict"
            }
          ],
          "description": "Package specifiers that provide the identifier at `id`.",
          "title": "Specs"
        },
        "urls": {
          "anyOf": [
            {
              "format": "uri",
              "minLength": 1,
              "type": "string"
            },
            {
              "items": {
                "format": "uri",
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            {
              "additionalProperties": {
                "format": "uri",
                "minLength": 1,
                "type": "string"
              },
              "propertyNames": {
                "minLength": 1
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Hyperlinks to web locations that provide more information about the mapping.",
          "title": "Urls"
        }
      },
      "required": [
        "id",
        "specs"
      ],
      "title": "MappingWithSpecs",
      "type": "object"
    },
    "MappingWithSpecsFrom": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "PURL-like identifier, as provided in the central registry,\nbeing mapped to ecosystem specific packages.",
          "minLength": 5,
          "pattern": "^dep:.+$",
          "title": "Id",
          "type": "string"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Free-form field for details about the mapping. Allows Markdown.",
          "title": "Description"
        },
        "extra_metadata": {
          "anyOf": [
            {
              "additionalProperties": true,
              "propertyNames": {
                "minLength": 1
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Free-form key-value store for arbitrary metadata.",
          "title": "Extra Metadata"
        },
        "specs_from": {
          "description": "Identifier of another mapping entry with identical dependencies. Useful to avoid duplication.\nCannot be used together with `specs`.",
          "minLength": 5,
          "pattern": "^dep:.+$",
          "title": "Specs From",
          "type": "string"
        },
        "urls": {
          "anyOf": [
            {
              "format": "uri",
              "minLength": 1,
              "type": "string"
            },
            {
              "items": {
                "format": "uri",
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            {
              "additionalProperties": {
                "format": "uri",
                "minLength": 1,
                "type": "string"
              },
              "propertyNames": {
                "minLength": 1
              },
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Hyperlinks to web locations that provide more information about the mapping.",
          "title": "Urls"
        }
      },
      "required": [
        "id",
        "specs_from"
      ],
      "title": "MappingWithSpecsFrom",
      "type": "object"
    },
    "PackageManager": {
      "additionalProperties": false,
      "description": "Details of a particular package manager for this ecosystem.",
      "properties": {
        "name": {
          "description": "Name of the package manager",
          "minLength": 1,
          "title": "Name",
          "type": "string"
        },
        "commands": {
          "$ref": "#/$defs/PackageManagerCommands"
        },
        "specifier_syntax": {
          "$ref": "#/$defs/SpecifierSyntax",
          "description": "Instructions to transform package names and version constrains for this package manager"
        }
      },
      "required": [
        "name",
        "commands",
        "specifier_syntax"
      ],
      "title": "PackageManager",
      "type": "object"
    },
    "PackageManagerCommand": {
      "additionalProperties": false,
      "description": "Command template plus its elevation requirements.",
      "properties": {
        "command": {
          "description": "Command template, as expected by `subprocess.run`. Use `{}` as a placeholder for package(s).",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "title": "Command",
          "type": "array"
        },
        "multiple_specifiers": {
          "default": "always",
          "description": "Whether the command accepts multiple specifiers at once or not. Defaults to `always`.\nUse `name-only` if the command only accepts multiple specifiers when they don't have\nversion information. With `never`, only one specifier is accepted at a time, which\nwill result in several single-spec commands being generated.",
          "enum": [
            "always",
            "name-only",
            "never"
          ],
          "title": "Multiple Specifiers",
          "type": "string"
        },
        "requires_elevation": {
          "default": false,
          "description": "Whether the command requires elevated permissions to run.",
          "title": "Requires Elevation",
          "type": "boolean"
        }
      },
      "required": [
        "command"
      ],
      "title": "PackageManagerCommand",
      "type": "object"
    },
    "PackageManagerCommands": {
      "additionalProperties": false,
      "description": "Command templates needed to execute certain operations with this package manager",
      "properties": {
        "install": {
          "$ref": "#/$defs/PackageManagerCommand",
          "description": "Command that must be used to install the given package(s). Each argument must be provided as a\nseparate string, as in `subprocess.run`. Use `\"{}\"` as a placeholder where the package spec(s)\nmust be injected. The placeholder can only appear once in the whole list."
        },
        "query": {
          "anyOf": [
            {
              "$ref": "#/$defs/PackageManagerCommand"
            },
            {
              "type": "null"
            }
          ],
          "description": "Command to check whether a package is installed. The tool must only accept one package at a\ntime. Each argument must be provided as a separate string, as in `subprocess.run`. The `{}`\nplaceholder will be replaced by the single package. An empty list means no query command is\navailable for this package manager."
        }
      },
      "required": [
        "install",
        "query"
      ],
      "title": "PackageManagerCommands",
      "type": "object"
    },
    "SpecifierSyntax": {
      "additionalProperties": false,
      "description": "Instructions to process the packager specifiers once mapped.",
      "properties": {
        "exact_version": {
          "anyOf": [
            {
              "items": {
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "description": "Template used to request a package with a specific version (a literal, not a range).\nSince some package managers require separate arguments, this is a list of strings. The\nfollowing placeholders are defined: `{name}` (name of the package), `{version}` (the\nexact version being requested). Some examples: `[\"{name}=={version}\"]`,\n`[\"{name}\", \"--version={version}\"]`. A value of `None` means that the package manager\ndoes not support version selection, only names.",
          "title": "Exact Version"
        },
        "name_only": {
          "description": "Template used to request a package by name only, with no version constraints.\nUse the `{name}` placeholder to write the mapped name of the package. A list of\nstrings is required because some package managers require several arguments to\nrequest a single package; e.g. `[\"--package\", \"{name}\"]`.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "title": "Name Only",
          "type": "array"
        },
        "version_ranges": {
          "anyOf": [
            {
              "$ref": "#/$defs/VersionRanges"
            },
            {
              "type": "null"
            }
          ],
          "description": "How to map version constraints from PEP440 style to the target package manager."
        }
      },
      "required": [
        "name_only",
        "exact_version",
        "version_ranges"
      ],
      "title": "SpecifierSyntax",
      "type": "object"
    },
    "SpecsDict": {
      "additionalProperties": false,
      "properties": {
        "build": {
          "anyOf": [
            {
              "minLength": 1,
              "type": "string"
            },
            {
              "items": {
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Dependencies that must be present at build time and can be executed in the build machine.",
          "title": "Build"
        },
        "host": {
          "anyOf": [
            {
              "minLength": 1,
              "type": "string"
            },
            {
              "items": {
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Dependencies that must be present at build time but only for linking purposes.\nTheir architecture does not need to match the build machine.",
          "title": "Host"
        },
        "run": {
          "anyOf": [
            {
              "minLength": 1,
              "type": "string"
            },
            {
              "items": {
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Dependencies needed at runtime in the end-user machines.",
          "title": "Run"
        }
      },
      "title": "SpecsDict",
      "type": "object"
    },
    "VersionRanges": {
      "additionalProperties": false,
      "description": "Instructions to map PEP 440 specifiers to a package manager specific constraints.\nUse an empty string if there's no equivalent. Use `{name}` and `{version}` as\nplaceholders. The `and` field is not templated; it should just be the `and` operator.\nIf not available, the constraints will be exploded into several specifiers (e.g.\n`name>=2,<3` would become `name>=2 name<3`).",
      "properties": {
        "and": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "How to merge several constraints. If the value is a string, this will be used to join all\nthe version constraints in a single string. If set to `None`, the constraints will not be\njoined, but appended as different arguments to the command.",
          "title": "And"
        },
        "equal": {
          "description": "A range for fuzzy equality. If defined as a string, it MUST include at least the `{version}`\nplaceholder. If `None`, this operator is not supported and no version constraints will be\napplied.",
          "title": "Equal",
          "type": "string"
        },
        "greater_than": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A range for exclusive lower bound. If defined as a string, it MUST include at least the\n`{version}` placeholder. If `None`, this operator is not supported and no version constraints\nwill be applied.",
          "title": "Greater Than"
        },
        "greater_than_equal": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A range for inclusive lower bound. If defined as a string, it MUST include at least the\n`{version}` placeholder. If `None`, this operator is not supported and no version constraints\nwill be applied.",
          "title": "Greater Than Equal"
        },
        "less_than": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A range for exclusive upper bound. If defined as a string, it MUST include at least the\n`{version}` placeholder. If `None`, this operator is not supported and no version constraints\nwill be applied.",
          "title": "Less Than"
        },
        "less_than_equal": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A range for inclusive upper bound. If defined as a string, it MUST include at least the\n`{version}` placeholder. If `None`, this operator is not supported and no version constraints\nwill be applied.",
          "title": "Less Than Equal"
        },
        "not_equal": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "A range for inequality. If defined as a string, it MUST include at least the `{version}`\nplaceholder. If `None`, this operator is not supported and no version constraints will be\napplied.",
          "title": "Not Equal"
        },
        "syntax": {
          "description": "The syntax used to specify a constrained package selection (e.g. `package>=3,<4`). The\nfollowing placeholders are supported: `{name}` (the name of the package), `ranges` (the merged\nversion constraints). This value is a list of strings because some package managers may need\nseveral arguments to express a single package version constraint. It MUST include at least\n`{ranges}`. Some examples: `[\"{name}{ranges}\"]`, `[\"{ranges}\"]`, `[\"--spec\", \"{name}\",\n\"--version\", \"{ranges}\"]`.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "title": "Syntax",
          "type": "array"
        }
      },
      "required": [
        "syntax",
        "and",
        "equal",
        "greater_than_equal",
        "greater_than",
        "less_than_equal",
        "less_than",
        "not_equal"
      ],
      "title": "VersionRanges",
      "type": "object"
    }
  },
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "default": "",
      "description": "URL of the mappings schema in use for the document.",
      "title": "$Schema",
      "type": "string"
    },
    "schema_version": {
      "default": 1,
      "exclusiveMaximum": 2,
      "minimum": 1,
      "title": "Schema Version",
      "type": "integer"
    },
    "name": {
      "description": "Name of the schema",
      "minLength": 1,
      "title": "Name",
      "type": "string"
    },
    "description": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Free-form field to add information this mapping. Allows Markdown.",
      "title": "Description"
    },
    "mappings": {
      "description": "List of PURL-to-specs mappings.",
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/MappingWithSpecs"
          },
          {
            "$ref": "#/$defs/MappingWithSpecsFrom"
          }
        ]
      },
      "title": "Mappings",
      "type": "array"
    },
    "package_managers": {
      "description": "List of tools that can be used to install packages in this ecosystem.",
      "items": {
        "$ref": "#/$defs/PackageManager"
      },
      "title": "Package Managers",
      "type": "array"
    }
  },
  "required": [
    "name",
    "package_managers",
    "mappings"
  ],
  "title": "MappingsModel",
  "type": "object"
}
